name: Build and Release Flutter App

on:
  push:
    branches:
      - main # Or your primary development branch
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    name: Build for Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform_name: windows
            build_command: flutter build windows --release
            artifact_path: build/windows/x64/runner/Release
            archive_extension: zip
       
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.2' # Specify your desired Flutter version
          channel: 'stable'
          cache: true

      - name: Get App Info from pubspec.yaml
        id: app_info
        shell: bash
        run: |
          APP_NAME=$(grep '^name:' pubspec.yaml | awk '{print $2}')
          APP_VERSION_FULL=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          APP_VERSION=$(echo "$APP_VERSION_FULL" | cut -d '+' -f 1)
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
          echo "App Name: $APP_NAME"
          echo "App Version: $APP_VERSION"

      - name: Create .env file from Secrets
        shell: bash
        run: |
          echo "Creating .env file..."
          echo "COS_APP_ID=${{ secrets.COS_APP_ID }}" > .env
          echo "COS_SECRET_ID=${{ secrets.COS_SECRET_ID }}" >> .env
          echo "COS_SECRET_KEY=${{ secrets.COS_SECRET_KEY }}" >> .env
          echo "COS_REGION=${{ secrets.COS_REGION }}" >> .env
          echo "COS_BUCKET=${{ secrets.COS_BUCKET }}" >> .env
          # Add more lines for each environment variable you need,
          # ensuring you have corresponding secrets configured in GitHub.
          # Example: echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo ".env file created."
          echo "Contents of .env (first few lines for verification, ensure no real secrets are printed if this log is public):"
          head -n 6 .env

      - name: Determine Version Tag for Artifact
        id: version_tag
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "VERSION_TAG_VALUE=${{ github.ref_name }}" >> $GITHUB_ENV
          else
            echo "VERSION_TAG_VALUE=${{ env.APP_VERSION }}-dev-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi
          echo "Using version tag for artifact: ${{ env.VERSION_TAG_VALUE }}"

      - name: Clean pub cache
        run: flutter pub cache repair

      - name: Install dependencies
        run: flutter pub get

      - name: Enable Windows desktop support
        run: flutter config --enable-windows-desktop
        # This ensures the toolchain is aware, actual build depends on project having these platform folders

      - name: Build Flutter app
        run: ${{ matrix.build_command }}

      - name: Archive Release
        shell: pwsh
        run: |
          $ARTIFACT_FILENAME = "${{ env.APP_NAME }}-${{ env.VERSION_TAG_VALUE }}-${{ matrix.platform_name }}.${{ matrix.archive_extension }}"
          Write-Host "Archiving to: $ARTIFACT_FILENAME"
          Compress-Archive -Path ${{ matrix.artifact_path }}\* -DestinationPath $ARTIFACT_FILENAME -Force
          echo "ARCHIVED_AS=$ARTIFACT_FILENAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.platform_name }}-${{ env.VERSION_TAG_VALUE }} # Unique artifact name
          path: ${{ env.ARCHIVED_AS }} # Path to the single archive file

  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    # Only run for version tags like v1.0.0, v1.2.3-beta.1 etc.
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write # Required to create releases and upload assets

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts # Downloads all artifacts into 'release-artifacts' directory

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: "Automated release for ${{ github.ref_name }}. Assets built from commit ${{ github.sha }}."
          draft: false
          prerelease: ${{ contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }} # Mark as pre-release if tag contains -beta or -alpha

      - name: Upload Release Assets
        shell: bash
        run: |
          echo "Release ID: ${{ steps.create_release.outputs.id }}"
          echo "Upload URL: ${{ steps.create_release.outputs.upload_url }}"
          echo "Looking for assets in release-artifacts/"
          # Loop through each artifact downloaded. download-artifact@v4 places each artifact in a subdirectory named after the artifact's 'name'
          # Since we only have one artifact type now, we can be more direct or keep the loop
          find release-artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -print0 | while IFS= read -r -d $'\0' asset_path; do
            asset_name=$(basename "$asset_path")
            echo "Uploading $asset_name from $asset_path"
            gh release upload "${{ github.ref_name }}" "$asset_path" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}